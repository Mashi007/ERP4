// app/layout.tsx
import { CurrencyProvider } from "@/components/providers/currency-provider"
import { ReactNode } from "react"

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        <CurrencyProvider>
          {children}
        </CurrencyProvider>
      </body>
    </html>
  )
}

// components/dashboard-charts.tsx
import React from "react"
import { useCurrency } from "@/components/providers/currency-provider"

interface PipelineChartProps {
  data: any[]
}

export function PipelineChart({ data }: PipelineChartProps) {
  const { format } = useCurrency()

  return (
    <div>
      {data.map((d) => (
        <div key={d.id}>
          {format(d.value || 0)} {" Â· "} {d.count}
        </div>
      ))}
    </div>
  )
}

// app/dashboard/page.tsx
import { getOrgCurrency } from "@/lib/org-settings"
import { ReactNode } from "react"

export default async function DashboardPage() {
  const data = await fetchData()
  const report = await fetchReport()
  const owners = await fetchOwners()

  const currencyCode = await getOrgCurrency("default")
  const currencyFmt = new Intl.NumberFormat(undefined, { style: "currency", currency: currencyCode, maximumFractionDigits: 0 })

  return (
    <div>
      <StatCard title="Ingresos (pipeline)" value={currencyFmt.format(data.totals.totalRevenue)} />
      {/* ** rest of code here ** */}
    </div>
  )
}

// app/deals/page.tsx
import React from "react"
import { useCurrency } from "@/components/providers/currency-provider"

interface DealsPageProps {
  deals: any[]
}

export function DealsPage({ deals }: DealsPageProps) {
  const { code: currencyCode, format } = useCurrency()

  return (
    <div>
      {deals.map((deal) => (
        <div key={deal.id}>
          <span>{format(deal.value)}</span>
          {/* ** rest of code here ** */}
        </div>
      ))}
      {/* ** rest of code here ** */}
    </div>
  )
}

// app/pipeline/embudo/page.tsx
import React from "react"
import { useCurrency } from "@/components/providers/currency-provider"

interface EmbudoPageProps {
  deals: any[]
}

export function EmbudoPage({ deals }: EmbudoPageProps) {
  const { code: currencyCode, format } = useCurrency()

  const pipelineStages = deals.map((deal) => ({
    name: deal.stage,
    weightedValue: deal.value,
  }))

  return (
    <div>
      {pipelineStages.map((stage) => (
        <div key={stage.name}>
          {format(stage.weightedValue as number)}
          {/* ** rest of code here ** */}
        </div>
      ))}
      {/* ** rest of code here ** */}
    </div>
  )
}

// app/pipeline/oportunidades/page.tsx
import React from "react"
import { useCurrency } from "@/components/providers/currency-provider"

interface OportunidadesPageProps {
  deals: any[]
}

export function OportunidadesPage({ deals }: OportunidadesPageProps) {
  const { code: currencyCode, format } = useCurrency()

  return (
    <div>
      {deals.map((deal) => (
        <div key={deal.id}>
          <span>{format(deal.value)}</span>
          {/* ** rest of code here ** */}
        </div>
      ))}
      {/* ** rest of code here ** */}
    </div>
  )
}
